import asyncio
import glob
import os
import sys
import urllib.request
from datetime import timedelta
from pathlib import Path

from telethon import Button, functions, types
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.utils import get_peer_id

from sbb_b import BOTLOG, BOTLOG_CHATID, PM_LOGGER_GROUP_ID

from ..Config import Config
from ..core.logger import logging
from ..core.session import sbb_b
from ..helpers.utils import install_pip
from ..helpers.utils.utils import runcmd
from ..sql_helper.global_collection import (
    del_keyword_collectionlist,
    get_item_collectionlist,
)
from ..sql_helper.globals import addgvar, gvarstatus
from .pluginmanager import load_module
from .tools import create_supergroup

ENV = bool(os.environ.get("ENV", False))
LOGS = logging.getLogger("ุงุนุฏุงุฏ ุชูุจุซูู")
cmdhr = Config.COMMAND_HAND_LER

if ENV:
    VPS_NOLOAD = ["ุณูุฑูุฑ"]
elif os.path.exists("config.py"):
    VPS_NOLOAD = ["ููุฑููู"]


async def setup_bot():
    sbb_b.me = await sbb_b.get_me()
    sbb_b.uid = sbb_b.me.id
    if Config.OWNER_ID == 0:
        Config.OWNER_ID = get_peer_id(sbb_b.me)
    await sbb_b.tgbot.start(bot_token=Config.TG_BOT_USERNAME)
    sbb_b.tgbot.me = await sbb_b.tgbot.get_me()
    bot_details = sbb_b.tgbot.me
    Config.TG_BOT_USERNAME = f"@{bot_details.username}"


async def saves():
    try:
        os.environ[
            "STRING_SESSION"
        ] = "**โ :: ุงูุชุจู ุนุฒูุฒู ุงููุณุชุฎุฏู ูุฐุง ุงูููู ููุบู ููููู ุงุฎุชุฑุงู ุญุณุงุจู ูู ูุชู ุชูุตูุจู ูู ุญุณุงุจู ูุง ุชููู  ๐ฐ.**"
    except Exception as e:
        print(str(e))
    try:
        await sbb_b(JoinChannelRequest("@Tepthon"))
        await sbb_b(JoinChannelRequest("@P17_12"))
        await sbb_b(JoinChannelRequest("@Tepthon_Help"))
        await sbb_b(JoinChannelRequest("@super_tepthon"))
    except BaseException:
        pass


async def mybot():
    SBB_B_USER = sbb_b.me.first_name
    The_razan = sbb_b.uid
    rz_ment = f"[{SBB_B_USER}](tg://user?id={The_razan})"
    f"ู {rz_ment}"
    f"โชผ ูุฐุง ูู ุจูุช ุฎุงุต ุจู {rz_ment} ููููู ุงูุชูุงุตู ูุนู ููุง"
    starkbot = await sbb_b.tgbot.get_me()
    perf = "[ ุชูุจุซูู ]"
    bot_name = starkbot.first_name
    botname = f"@{starkbot.username}"
    if bot_name.endswith("Assistant"):
        print("ุชู ุชุดุบูู ุงูุจูุช")
    else:
        try:
            await sbb_b.send_message("@BotFather", "/setinline")
            await asyncio.sleep(1)
            await sbb_b.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await sbb_b.send_message("@BotFather", perf)
            await asyncio.sleep(2)
        except Exception as e:
            print(e)


async def startupmessage():
    """
    ุฑุณุงูุฉ ุงูุชุดุบูู
    """
    try:
        if BOTLOG:
            Config.JMTHONLOGO = await sbb_b.tgbot.send_file(
                BOTLOG_CHATID,
                "https://telegra.ph/file/f1e757035e56613a9ef92.jpg",
                caption="**ุชู ุชุดุบูู ุณูุฑุณ ุชูุจุซูู ุจูุฌุงุญ ูุนุฑุถ ุงูุงูุงูุฑ ุงุฑุณู .ุงูุงูุงูุฑ**",
                buttons=[(Button.url("ูุฑูุจ ุงููุณุงุนุฏุฉ", "https://t.me/Tepthon_Help"),)],
            )
    except Exception as e:
        LOGS.error(e)
        return None
    try:
        msg_details = list(get_item_collectionlist("restart_update"))
        if msg_details:
            msg_details = msg_details[0]
    except Exception as e:
        LOGS.error(e)
        return None
    try:
        if msg_details:
            await sbb_b.check_testcases()
            message = await sbb_b.get_messages(msg_details[0], ids=msg_details[1])
            text = message.text + "\n\n**ุงูุงู ุงูุณูุฑุณ ุดุบุงู ุทุจูุนู.**"
            await sbb_b.edit_message(msg_details[0], msg_details[1], text)
            if gvarstatus("restartupdate") is not None:
                await sbb_b.send_message(
                    msg_details[0],
                    f"{cmdhr}ูุญุต",
                    reply_to=msg_details[1],
                    schedule=timedelta(seconds=10),
                )
            del_keyword_collectionlist("restart_update")
    except Exception as e:
        LOGS.error(e)
        return None


async def add_bot_to_logger_group(chat_id):
    """
    ุงุถุงูุฉ ุงูุจูุช ูููุฑูุจุงุช
    """
    bot_details = await sbb_b.tgbot.get_me()
    try:
        await sbb_b(
            functions.messages.AddChatUserRequest(
                chat_id=chat_id,
                user_id=bot_details.username,
                fwd_limit=1000000,
            )
        )
    except BaseException:
        try:
            await sbb_b(
                functions.channels.InviteToChannelRequest(
                    channel=chat_id,
                    users=[bot_details.username],
                )
            )
        except Exception as e:
            LOGS.error(str(e))


async def load_plugins(folder, extfolder=None):
    """
    ุชุญููู ูููุงุช ุงูุณูุฑุณ
    """
    if extfolder:
        path = f"{extfolder}/*.py"
        plugin_path = extfolder
    else:
        path = f"sbb_b/{folder}/*.py"
        plugin_path = f"sbb_b/{folder}"
    files = glob.glob(path)
    files.sort()
    success = 0
    failure = []
    for name in files:
        with open(name) as f:
            path1 = Path(f.name)
            shortname = path1.stem
            pluginname = shortname.replace(".py", "")
            try:
                if (pluginname not in Config.NO_LOAD) and (
                    pluginname not in VPS_NOLOAD
                ):
                    flag = True
                    check = 0
                    while flag:
                        try:
                            load_module(
                                pluginname,
                                plugin_path=plugin_path,
                            )
                            if shortname in failure:
                                failure.remove(shortname)
                            success += 1
                            break
                        except ModuleNotFoundError as e:
                            install_pip(e.name)
                            check += 1
                            if shortname not in failure:
                                failure.append(shortname)
                            if check > 5:
                                break
                else:
                    os.remove(Path(f"{plugin_path}/{shortname}.py"))
            except Exception as e:
                if shortname not in failure:
                    failure.append(shortname)
                os.remove(Path(f"{plugin_path}/{shortname}.py"))
                LOGS.info(
                    f"ูู ูุชู ุชุญููู {shortname} ุจุณุจุจ ุฎุทุฃ {e}\nูุณุงุฑ ุงูููู {plugin_path}"
                )
    if extfolder:
        if not failure:
            failure.append("None")
        await sbb_b.tgbot.send_message(
            BOTLOG_CHATID,
            f'- ุชู ุจูุฌุงุญ ุงุณุชุฏุนุงุก ุงูุงูุงูุฑ ุงูุงุถุงููู \n**ุนุฏุฏ ุงููููุงุช ุงูุชู ุงุณุชุฏุนูุช:** `{success}`\n**ูุดู ูู ุงุณุชุฏุนุงุก :** `{", ".join(failure)}`',
        )


async def verifyLoggerGroup():
    """
    ุงูุชุงูุฏ ูู ูุฑูุจ ุงูุชุฎุฒูู
    """
    flag = False
    if BOTLOG:
        try:
            entity = await sbb_b.get_entity(BOTLOG_CHATID)
            if not isinstance(entity, types.User) and not entity.creator:
                if entity.default_banned_rights.send_messages:
                    LOGS.info(
                        "ูุง ุชูุฌุฏ ุตูุงุญูุงุช ูุงููุฉ ูุงุฑุณุงู ุงูุฑุณุงุฆู ูู ูุฑูุจ ุงูุญูุธ ุงู ุงูุชุฎุฒูู"
                    )
                if entity.default_banned_rights.invite_users:
                    LOGS.info(
                        "ูุง ุชูุฌุฏ ุตูุงุญูุงุช ูุงููุฉ ูุงุถุงูุฉ ุงูุงุนุถุงุก ูู ูุฑูุจ ุงูุญูุธ ุงู ุงูุชุฎุฒูู"
                    )
        except ValueError:
            LOGS.error("ูู ูุชู ุงูุชุนุฑู ุนูู ูุงุฑ ูุฑูุจ ุงูุญูุธ")
        except TypeError:
            LOGS.error("ูุจุฏู ุงูู ูุถุนุช ูุงุฑ ูุฑูุจ ุงูุญูุธ ุจุดูู ุบูุฑ ุตุญูุญ")
        except Exception as e:
            LOGS.error("ููุงูู ุฎุทุง ูุง ููุชุนุฑู ุนูู ูุงุฑ ูุฑูุจ ุงูุญูุธ\n" + str(e))
    else:
        descript = "โชผ ูุฐู ูู ูุฌููุนู ุงูุญูุธ ุงูุฎุงุตู ุจู ูุง ุชุญุฐููุง ุงุจุฏุง  ๐ฐ."
        photobt = await sbb_b.upload_file(file="razan/pic/tepthon.jpeg")
        _, groupid = await create_supergroup(
            "ูุฑูุจ ุจูุช ุชูุจุซูู", sbb_b, Config.TG_BOT_USERNAME, descript, photobt
        )
        addgvar("PRIVATE_GROUP_BOT_API_ID", groupid)
        print("ุชู ุงูุดุงุก ูุฑูุจ ุงูุญูุธ ุจูุฌุงุญ")
        flag = True
    if PM_LOGGER_GROUP_ID != -100:
        try:
            entity = await sbb_b.get_entity(PM_LOGGER_GROUP_ID)
            if not isinstance(entity, types.User) and not entity.creator:
                if entity.default_banned_rights.send_messages:
                    LOGS.info("ูุง ุชูุฌุฏ ุตูุงุญูุงุช ูุงููุฉ ูุงุฑุณุงู ุงูุฑุณุงุฆู ูู ูุฑูุจ ุงูุชุฎุฒูู")
                if entity.default_banned_rights.invite_users:
                    LOGS.info("ูุง ุชูุฌุฏ ุตูุงุญูุงุช ูุงููุฉ ูุงุถุงูุฉ ุงูุงุนุถุงุก ูู ูุฑูุจ ุงูุชุฎุฒูู")
        except ValueError:
            LOGS.error(
                "ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุฏู ูุฑูุจ ุงูุชุฎุฒูู ุชุงูุฏ ูู ุงูู ููุชูุจ ุจุดูู ุตุญูุญ "
            )
        except TypeError:
            LOGS.error("ุตูุบู ุงูุฏู ูุฑูุจ ุงูุชุฎุฒูู ุบูุฑ ุตุงูุญุฉ.ุชุงูุฏ ูู ุงูู ููุชูุจ ุจุดูู ุตุญูุญ ")
        except Exception as e:
            LOGS.error("ุญุฏุซ ุฎุทุฃ ุงุซูุงุก ุงูุชุนุฑู ุนูู ูุฑูุจ ุงูุชุฎุฒูู\n" + str(e))
    else:
        descript = "โ ูุง ุชุญุฐู ุงู ุชุบุงุฏุฑ ุงููุฌููุนู ูุธููุชูุง ุญูุธ ุฑุณุงุฆู ุงูุชู ุชุฃุชู ุนูู ุงูุฎุงุต"
        photobt = await sbb_b.upload_file(file="razan/pic/tepthon.jpeg")
        _, groupid = await create_supergroup(
            "ูุฌููุนุฉ ุงูุชุฎุฒูู", sbb_b, Config.TG_BOT_USERNAME, descript, photobt
        )
        addgvar("PM_LOGGER_GROUP_ID", groupid)
        print("ุชู ุนูู ุงููุฑูุจ ุงูุชุฎุฒูู ุจูุฌุงุญ ูุงุถุงูุฉ ุงููุงุฑุงุช ุงููู.")
        flag = True
    if flag:
        executable = sys.executable.replace(" ", "\\ ")
        args = [executable, "-m", "sbb_b"]
        os.execle(executable, *args, os.environ)
        sys.exit(0)


async def install_externalrepo(repo, branch, cfolder):
    JMTHONREPO = repo
    rpath = os.path.join(cfolder, "requirements.txt")
    if JMTHONBRANCH := branch:
        repourl = os.path.join(JMTHONREPO, f"tree/{JMTHONBRANCH}")
        gcmd = f"git clone -b {JMTHONBRANCH} {JMTHONREPO} {cfolder}"
        errtext = f"ูุง ููุญุฏ ูุฑุน ุจุฃุณู `{JMTHONBRANCH}` ูู ุงูุฑูุจู ุงูุฎุงุฑุฌู {JMTHONREPO}. ุชุงูุฏ ูู ุงุณู ุงููุฑุน ุนุจุฑ ูุงุฑ (`EXTERNAL_REPO_BRANCH`)"
    else:
        repourl = JMTHONREPO
        gcmd = f"git clone {JMTHONREPO} {cfolder}"
        errtext = f"ุงูุฑุงุจุท ({JMTHONREPO}) ุงูุฐู ูุถุนุชู ููุงุฑ `EXTERNAL_REPO` ุบูุฑ ุตุญูุญ ุนููู ูุถุน ุฑุงุจุท ุตุญูุญ"
    response = urllib.request.urlopen(repourl)
    if response.code != 200:
        LOGS.error(errtext)
        return await sbb_b.tgbot.send_message(BOTLOG_CHATID, errtext)
    await runcmd(gcmd)
    if not os.path.exists(cfolder):
        LOGS.error(
            "ููุงูู ุฎุทุฃ ุงุซูุงุก ุงุณุชุฏุนุงุก ุฑุงุจุท ุงููููุงุช ุงูุงุถุงููุฉ ูุฌุจ ุงูุชุฃูุฏ ูู ุงูุฑุงุจุท ุงููุง "
        )
        return await sbb_b.tgbot.send_message(
            BOTLOG_CHATID,
            "ููุงูู ุฎุทุฃ ุงุซูุงุก ุงุณุชุฏุนุงุก ุฑุงุจุท ุงููููุงุช ุงูุงุถุงููุฉ ูุฌุจ ุงูุชุฃูุฏ ูู ุงูุฑุงุจุท ุงููุง ",
        )
    if os.path.exists(rpath):
        await runcmd(f"pip3 install --no-cache-dir -r {rpath}")
    await load_plugins(folder="sbb_b", extfolder=cfolder)
